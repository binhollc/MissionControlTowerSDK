name: Tests

on:
  pull_request:
    branches: 
      - '*/develop*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [32, 64]
        include:
          - arch: 32
            arch_python: x64
            arch_cmake: win32
          - arch: 64
            arch_python: x64
            arch_cmake: x64
        exclude:
          - os: ubuntu-latest
            arch: 32
          - os: macos-latest
            arch: 32

    runs-on: ${{ matrix.os }}

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    continue-on-error: true

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.9'
        architecture: ${{ matrix.arch_python }}

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Build and stage the Bridge, library and examples (Mac and Linux)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        ./build_and_stage.sh

    - name: Build the Bridge, library and examples (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\build_and_stage.bat ${{ matrix.arch_cmake }}

    - name: Read staging directories on Linux and Mac
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      id: read_staging_dirs_linux
      run: |
        STAGING_DIR=$(grep STAGING_DIR build/staging_dirs.txt | cut -d '=' -f 2)
        STAGING_BIN_DIR=$(grep STAGING_BIN_DIR build/staging_dirs.txt | cut -d '=' -f 2)
        STAGING_BRIDGE_DIR=$(grep STAGING_BRIDGE_DIR build/staging_dirs.txt | cut -d '=' -f 2)
        echo "STAGING_DIR=${STAGING_DIR}" >> $GITHUB_ENV
        echo "STAGING_BIN_DIR=${STAGING_BIN_DIR}" >> $GITHUB_ENV
        echo "STAGING_BRIDGE_DIR=${STAGING_BRIDGE_DIR}" >> $GITHUB_ENV

    - name: Read staging directories on Windows
      if: matrix.os == 'windows-latest'
      id: read_staging_dirs_win
      run: |
        $stagingDirs = Get-Content -Path build/staging_dirs.txt
        foreach ($line in $stagingDirs) {
          if ($line -match "STAGING_DIR=(.+)") {
            $stagingDir = $matches[1]
            echo "STAGING_DIR=$stagingDir" >> $env:GITHUB_ENV
          }
          elseif ($line -match "STAGING_BIN_DIR=(.+)") {
            $stagingBinDir = $matches[1]
            echo "STAGING_BIN_DIR=$stagingBinDir" >> $env:GITHUB_ENV
          }
          elseif ($line -match "STAGING_BRIDGE_DIR=(.+)") {
            $stagingBridgeDir = $matches[1]
            echo "STAGING_BRIDGE_DIR=$stagingBridgeDir" >> $env:GITHUB_ENV
          }
        }

    - name: Add staging directories to PATH on Linux and Mac
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        echo "${{ env.STAGING_BIN_DIR }}" >> $GITHUB_PATH
        echo "${{ env.STAGING_BRIDGE_DIR }}" >> $GITHUB_PATH

    - name: Add staging directories to PATH on Windows
      if: matrix.os == 'windows-latest'
      run: |
        echo "${{ env.STAGING_BIN_DIR }}" >> $env:GITHUB_PATH
        echo "${{ env.STAGING_BRIDGE_DIR }}" >> $env:GITHUB_PATH

    - name: Build and run ctest (Mac and Linux)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        cd tests
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        cd build
        ctest -VV --rerun-failed --output-on-failure

    - name:  Build and run ctest (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd tests
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -A ${{ matrix.arch_cmake }}
        cmake --build build --config Release
        cd build
        ctest -VV --rerun-failed --output-on-failure
