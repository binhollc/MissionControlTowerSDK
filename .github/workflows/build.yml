name: Build and Package BMC SDK
env:
  VERSION: 1.1.0
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  PYTHON_VERSION: 3.11

on:
  workflow_dispatch:
    inputs:
      build-macos:
        type: boolean
        default: true
        required: true
        description: Build on Mac
      build-windows:
        type: boolean
        default: true
        required: true
        description: Build on Windows
      build-linux:
        type: boolean
        default: true
        required: true
        description: Build on Linux
      publish-to-digital-ocean:
        type: boolean
        default: false
        required: false
        description: Publish to Digital Ocean Space

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    if: ${{ inputs.build-linux }}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.arch_python }}

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Build and stage the Bridge, library and examples
      run: |
        ./build_and_stage.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-artifacts
        path: staging/
    
  build-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        arch: [32, 64]
        include:
          - arch: 32
            arch_python: x86
            arch_cmake: win32
          - arch: 64
            arch_python: x64
            arch_cmake: x64
    if: ${{ inputs.build-windows }}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.arch_python }}

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Build the Bridge, library and examples
      run: |
        dir
        .\build_and_stage.bat ${{ matrix.arch_cmake }}

    - name: Create Windows installer
      uses: joncloud/makensis-action@v4
      with:
        script-file: bmc_sdk_installer.nsi
        arguments: /DOUTFILE=BinhoMissionControlSDK-${{ env.VERSION }}-${{ matrix.arch }}.exe

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-artifacts
        path: staging/

    - name: Upload Windows installer
      uses: actions/upload-artifact@v3
      with:
        name: BinhoMissionControlSDK-${{ env.VERSION }}-${{ matrix.arch }}.exe
        path: BinhoMissionControlSDK-${{ env.VERSION }}-${{ matrix.arch }}.exe

  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    if: ${{ inputs.build-macos }}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.arch_python }}

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Build and stage the Bridge, library and examples
      run: |
        ./build_and_stage.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-artifacts
        path: staging/

  publish-to-digital-ocean:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    needs: [build-ubuntu, build-windows, build-macos]
    if: ${{ inputs.publish-to-digital-ocean && always() }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        path: staging/

    - name: Install s3cmd
      run: pip3 install s3cmd

    - name: Upload build artifacts to Digital Ocean Space
      run: |
        s3cmd \
          --access_key="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_ACCESS}}" \
          --secret_key="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_SECRET }}" \
          --host="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_REGION }}.digitaloceanspaces.com" \
          --host-bucket="%(bucket)s.${{ secrets.BINHO_DIGITAL_OCEAN_CDN_REGION }}.digitaloceanspaces.com" \
          --recursive \
          --acl-public \
          put \
          staging/* \
          s3://${{ secrets.BINHO_DIGITAL_OCEAN_CDN_SPACE_NAME }}/sw/MissionControlTowerSDK/${{ env.VERSION }}/