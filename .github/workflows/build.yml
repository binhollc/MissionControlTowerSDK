name: Build and Package BMC SDK
env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      build-macos:
        type: boolean
        default: true
        required: true
        description: Build on Mac
      build-windows:
        type: boolean
        default: true
        required: true
        description: Build on Windows
      build-linux:
        type: boolean
        default: true
        required: true
        description: Build on Linux
      publish-to-digital-ocean:
        type: boolean
        default: false
        required: false
        description: Publish to Digital Ocean Space
      is-latest:
        type: boolean
        default: false
        required: false
        description: Is this the latest version?

jobs:
  check-prerequisites:
    if: ${{ (inputs.is-latest && inputs.publish-to-digital-ocean && inputs.build-macos && inputs.build-windows && inputs.build-linux) || (!inputs.is-latest && (inputs.build-macos || inputs.build-windows || inputs.build-linux))}}
    runs-on: ubuntu-latest
    steps:
      - name: Print inputs
        run: |
              echo "Prerequisites check passed!"
              echo "Running with this inputs:"
              echo "- build-macos: ${{ inputs.build-macos }}"
              echo "- build-windows: ${{ inputs.build-windows }}"
              echo "- build-linux: ${{ inputs.build-linux }}"
              echo "- publish-to-digital-ocean: ${{ inputs.publish-to-digital-ocean }}"
              echo "- is-latest: ${{ inputs.is-latest }}"

  build-ubuntu:
    needs: [check-prerequisites]
    if: ${{ inputs.build-linux }}

    runs-on: ubuntu-latest

    env:
      PLATFORM: linux

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Extract version number
      run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

    - name: Build and stage the Bridge, library and examples
      run: |
        ./build_and_stage.sh

    - name: Set artifact file name
      run: |
        echo "ARTIFACT_NAME=bmc_cpp_sdk-${{ env.VERSION }}-${{ env.PLATFORM }}-binaries" >> $GITHUB_ENV

    - name: Zip staging contents
      run: |
        cd staging
        zip -r ../${{ env.ARTIFACT_NAME }}.zip .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}.zip

  build-windows:
    needs: [check-prerequisites]
    if: ${{ inputs.build-windows }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: 32
            platform: win32
            arch_python: x86
            arch_cmake: win32
          - os: windows-latest
            arch: 64
            platform: x64
            arch_python: x64
            arch_cmake: x64

    runs-on: ${{ matrix.os }}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Extract version number
      run: echo VERSION=$(Get-Content VERSION) >> $env:GITHUB_ENV
      shell: powershell

    - name: Set artifact file name
      run: |
        echo "ARTIFACT_NAME=bmc_cpp_sdk-${{ env.VERSION }}-${{ matrix.platform }}" >> $env:GITHUB_ENV
      shell: powershell

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Build the Bridge, library and examples
      run: |
        dir
        .\build_and_stage.bat ${{ matrix.arch_cmake }}

    - name: Windows Signing (staging)
      uses: GabrielAcostaEngler/signtool-code-sign@main
      with:
        certificate: '${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}'
        cert-password: '${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}'
        cert-sha1: '${{ secrets.WINDOWS_CERTIFICATE_SHA1 }}'
        cert-description: 'Binho LLC'
        folder: staging/
        recursive: false
        timestamp-server: 'http://timestamp.digicert.com'

    - name: Create folder for Windows installer
      run: |
        mkdir windows_installer

    - name: Create Windows installer
      uses: joncloud/makensis-action@v4
      with:
        script-file: bmc_sdk_installer.nsi
        arguments: /DOUTFILE=windows_installer\${{ env.ARTIFACT_NAME }}.exe

    - name: Windows Signing (installer)
      uses: GabrielAcostaEngler/signtool-code-sign@main
      with:
        certificate: '${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}'
        cert-password: '${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}'
        cert-sha1: '${{ secrets.WINDOWS_CERTIFICATE_SHA1 }}'
        cert-description: 'Binho LLC'
        folder: windows_installer/
        recursive: false
        timestamp-server: 'http://timestamp.digicert.com'

    - name: Zip staging contents
      run: |
        CD staging
        Compress-Archive -Path . -DestinationPath ..\${{ env.ARTIFACT_NAME }}-binaries.zip
      shell: powershell

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}-binaries.zip

    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}.exe
        path: windows_installer/${{ env.ARTIFACT_NAME }}.exe

  build-macos:
    needs: [check-prerequisites]
    if: ${{ inputs.build-macos }}

    strategy:
      matrix:
        include:
          - os: macos-13
            platform: mac
            arch: intel
            arch_python: x64
          - os: macos-14
            platform: mac
            arch: arm
            arch_python: x64

    runs-on: ${{ matrix.os }}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Extract version number
      run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Build and stage the Bridge, library and examples
      run: |
        ./build_and_stage.sh

    - name: Set artifact file name
      run: |
        echo "ARTIFACT_NAME=bmc_cpp_sdk-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}-binaries" >> $GITHUB_ENV

    - name: Run sign and notarize script
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
        NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        BUNDLE_ID: "com.binho.bmc_cpp_sdk"
      run: |
        ./sign_and_notarize.sh staging ${{ runner.temp }}
      shell: bash

    - name: Zip staging folder
      run: |
        cd staging
        zip -r ../${{ env.ARTIFACT_NAME }}.zip .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}.zip

  publish-to-digital-ocean:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    needs: [build-ubuntu, build-windows, build-macos]
    if: ${{ inputs.publish-to-digital-ocean && ((!inputs.is-latest && (needs.build-ubuntu.result == 'success' || needs.build-windows.result == 'success' || needs.build-macos.result == 'success')) || (inputs.is-latest && needs.build-ubuntu.result == 'success' && needs.build-windows.result == 'success' && needs.build-macos.result == 'success')) && always() }}

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        token: ${{ env.GH_TOKEN }}
        submodules: recursive

    - name: Extract version number
      run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: downloaded_artifacts/
        merge-multiple: true

    - name: Display structure of downloaded files
      run: ls -R

    - name: Install s3cmd
      run: pip3 install s3cmd

    - name: Upload build artifacts to Digital Ocean Space (version)
      run: |
        s3cmd \
          --access_key="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_ACCESS}}" \
          --secret_key="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_SECRET }}" \
          --host="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_REGION }}.digitaloceanspaces.com" \
          --host-bucket="%(bucket)s.${{ secrets.BINHO_DIGITAL_OCEAN_CDN_REGION }}.digitaloceanspaces.com" \
          --recursive \
          --acl-public \
          put \
          downloaded_artifacts/* \
          s3://${{ secrets.BINHO_DIGITAL_OCEAN_CDN_SPACE_NAME }}/sw/MissionControlTowerSDK/${{ env.VERSION }}/

    - name: Remove version from filenames
      if: ${{ inputs.is-latest }}
      run: |
        cd downloaded_artifacts
        for file in *; do
          new_name=$(echo "$file" | sed "s/-${{ env.VERSION }}//")
          mv -f "$file" "$new_name"
        done
        cd ..

    - name: Add version file
      if: ${{ inputs.is-latest }}
      run: mv -f ./VERSION ./downloaded_artifacts/VERSION

    - name: Upload build artifacts to Digital Ocean Space (latest)
      if: ${{ inputs.is-latest }}
      run: |
        s3cmd \
          --access_key="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_ACCESS}}" \
          --secret_key="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_SECRET }}" \
          --host="${{ secrets.BINHO_DIGITAL_OCEAN_CDN_REGION }}.digitaloceanspaces.com" \
          --host-bucket="%(bucket)s.${{ secrets.BINHO_DIGITAL_OCEAN_CDN_REGION }}.digitaloceanspaces.com" \
          --recursive \
          --acl-public \
          put \
          downloaded_artifacts/* \
          s3://${{ secrets.BINHO_DIGITAL_OCEAN_CDN_SPACE_NAME }}/sw/MissionControlTowerSDK/latest/
        